import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;

function <<test.Test>> meta::analytics::mapping::modelCoverage::test::testAutoMappedSemiStructuredUnionMapping():Boolean[1]
{
let semiGrammar = '###Relational\n'+
'Database test::store::testDB\n'+
'(\n'+
'  Schema PERSON_SCHEMA\n'+
'  (\n'+
'    Table PERSON_TABLE_1\n'+
'    (\n'+
'      ID INTEGER PRIMARY KEY,\n'+
'      FIRM_DETAILS VARCHAR(40),\n'+
'      MANAGER_ID INTEGER\n'+
'    )\n'+
'    Table PERSON_TABLE_2\n'+
'    (\n'+
'      ID INTEGER PRIMARY KEY,\n'+
'      FIRM_DETAILS VARCHAR(40),\n'+
'      MANAGER_ID INTEGER\n'+
'    )\n'+
'  )\n'+
')\n'+
'###ExternalFormat\n'+
'Binding test::binding::FirmBinding\n'+
'{\n'+
'  contentType: \'application/json\';\n'+
'  modelIncludes: [\n'+
'    test::model2::Firm\n'+
'  ];\n'+
'}\n'+
'###Pure\n'+
'Class test::model1::Person\n'+
'{\n'+
'  firm: test::model2::Firm[1];\n'+
'}\n'+
'Class test::model2::Firm\n'+
'{\n'+
'  firmName: String[1];\n'+
'}\n'+
'function test::query::getFirmDetails(): meta::pure::tds::TabularDataSet[1]\n'+
'{\n'+
'  test::model1::Person.all()->project(\n'+
'    [\n'+
'      x|$x.firm.firmName\n'+
'    ],\n'+
'    [\'Firm/FirmName\']\n'+
'  )->from(test::mapping::testMapping,test::runtime::testRuntime)\n'+
'}\n'+
'###Mapping\n'+
'Mapping test::mapping::testMapping\n'+
'(\n'+
'  *test::model1::Person: Operation\n'+
'  {\n'+
'    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(Type_A,Type_B)\n'+
'  }\n'+
'  test::model1::Person[Type_A]: Relational\n'+
'  {\n'+
'    ~primaryKey\n'+
'    (\n'+
'      [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_1.ID\n'+
'    )\n'+
'    ~mainTable [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_1\n'+
'    firm: Binding test::binding::FirmBinding : extractFromSemiStructured([test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_1.FIRM_DETAILS, \'firm\', \'VARCHAR\')\n'+
'  }\n'+
'  test::model1::Person[Type_B]: Relational\n'+
'  {\n'+
'    ~primaryKey\n'+
'    (\n'+
'      [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_2.ID\n'+
'    )\n'+
'    ~mainTable [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_2\n'+
'    firm: Binding test::binding::FirmBinding : [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_2.FIRM_DETAILS\n'+
'  }\n'+
')\n'+
'###Connection\n'+
'RelationalDatabaseConnection test::connection::testDBConnection\n'+
'{\n'+
'  store: test::store::testDB;\n'+
'  type: H2;\n'+
'  specification: LocalH2\n'+
'  {\n'+
'    testDataSetupSqls: [\n'+
'    \'Create Schema if not exists PERSON_SCHEMA;\',\n'+
'    \'Drop table if exists PERSON_SCHEMA.PERSON_TABLE_1;\',\n'+
'    \'Create Table PERSON_SCHEMA.PERSON_TABLE_1(ID INTEGER, FIRM_DETAILS VARCHAR(500), NAME VARCHAR(40));\',\n'+
'    \'Insert into PERSON_SCHEMA.PERSON_TABLE_1 (ID, FIRM_DETAILS, NAME) values (1, \\\'{"firm": {"firmName": "firm_A"}}\\\', \\\'ABC\\\');\',\n'+
'    \'Insert into PERSON_SCHEMA.PERSON_TABLE_1 (ID, FIRM_DETAILS, NAME) values (3, \\\'{"firm": {"firmName": "firm_B"}}\\\', \\\'PQR\\\');\',\n'+
'    \'Insert into PERSON_SCHEMA.PERSON_TABLE_1 (ID, FIRM_DETAILS, NAME) values (5, \\\'{"firm": {"firmName": "firm_C"}}\\\', \\\'XYZ\\\');\',\n'+
'    \'Drop table if exists PERSON_SCHEMA.PERSON_TABLE_2;\',\n'+
'    \'Create Table PERSON_SCHEMA.PERSON_TABLE_2(ID INTEGER, FIRM_DETAILS VARCHAR(500), NAME VARCHAR(40));\',\n'+
'    \'Insert into PERSON_SCHEMA.PERSON_TABLE_2 (ID, FIRM_DETAILS, NAME) values (2, \\\'{"firmName": "firm_D"}\\\', \\\'MNO\\\');\',\n'+
'    \'Insert into PERSON_SCHEMA.PERSON_TABLE_2 (ID, FIRM_DETAILS, NAME) values (4, \\\'{"firmName": "firm_E"}\\\', \\\'DEF\\\');\',\n'+
'    \'Insert into PERSON_SCHEMA.PERSON_TABLE_2 (ID, FIRM_DETAILS, NAME) values (6, \\\'{"firmName": "firm_F"}\\\', \\\'STU\\\');\'\n'+
'    ];\n'+
'  };\n'+
'  auth: DefaultH2;\n'+
'}\n'+
'###Runtime\n'+
'Runtime test::runtime::testRuntime\n'+
'{\n'+
'  mappings:\n'+
'  ['+
'    test::mapping::testMapping\n'+
'  ];\n'+
'  connections:\n'+
'  [\n'+
'    test::store::testDB:\n'+
'    [\n'+
'      test_connection: test::connection::testDBConnection\n'+
'    ]\n'+
'  ];\n'+
'}';

let elements = meta::legend::compileLegendGrammar($semiGrammar);
let autoMappedMapping = $elements->filter(e|$e->instanceOf(Mapping))->at(0)->cast(@Mapping);
let function = $elements->filter(e|$e->instanceOf(FunctionDefinition))->at(0)->cast(@FunctionDefinition<{->TabularDataSet[1]}>);
let runtime = $elements->filter(e|$e->instanceOf(PackageableRuntime))->at(0)->cast(@PackageableRuntime).runtimeValue;
let result = meta::pure::router::execute($function, $autoMappedMapping, $runtime, meta::relational::extension::relationalExtensions());

let expectedSQL = 'select cast(legend_h2_extension_json_navigate("unionBase"."extractFromSemiStructured_PERSON_TABLE_1FIRM_DETAILS_firm_VARCHAR_PERSON_TABLE_2FIRM_DETAILS", \'firmName\', null) as varchar) as "Firm/FirmName" from (select "root".ID as "pk_0_0", null as "pk_0_1", cast(legend_h2_extension_json_navigate("root".FIRM_DETAILS, \'firm\', null) as varchar) as "extractFromSemiStructured_PERSON_TABLE_1FIRM_DETAILS_firm_VARCHAR_PERSON_TABLE_2FIRM_DETAILS" from PERSON_SCHEMA.PERSON_TABLE_1 as "root" UNION ALL select null as "pk_0_0", "root".ID as "pk_0_1", "root".FIRM_DETAILS as "extractFromSemiStructured_PERSON_TABLE_1FIRM_DETAILS_firm_VARCHAR_PERSON_TABLE_2FIRM_DETAILS" from PERSON_SCHEMA.PERSON_TABLE_2 as "root") as "unionBase"';
assertSameSQL($expectedSQL, $result.activities->cast(@RelationalActivity).sql->toOne());

let expectedResult = ['firm_A', 'firm_B', 'firm_C', 'firm_D', 'firm_E', 'firm_F'];
assertSameElements($expectedResult, $result.values.rows->fold({a, b| $b->concatenate($a.values)}, []));

}
