import meta::relational::functions::sqlQueryToString::h2::*;
import meta::pure::executionPlan::toString::*;
import meta::core::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::*;
import meta::pure::alloy::connections::alloy::authentication::*;
import meta::pure::alloy::connections::alloy::specification::*;
import meta::external::store::model::*;

function <<meta::pure::profiles::test.Test>> meta::relational::tests::m2m2r::testProp1():Boolean[1]
{
   let result = meta::pure::executionPlan::executionPlan({|meta::relational::tests::m2m2r::Entitlement.all()
                                                          ->project([x|$x.name,x|$x.prop1],
                                                            ['name','prop1']);},
                                              meta::relational::tests::m2m2r::AxionToModelMapping,
                                              meta::relational::tests::m2m2r::runtime(),
                                              meta::relational::extension::relationalExtensions(), noDebug())->planToString( meta::relational::extension::relationalExtensions());
  let expected ='Relational\n' +
            '(\n' +
            '  type = TDS[(name, String, VARCHAR(8192), ""), (prop1, Boolean, BIT, "")]\n' +
            '  resultColumns = [("name", VARCHAR(200)), ("prop1", "")]\n' +
            '  sql = select "root".name as "name", "sourceannouncement_0".name = \'ha\' as "prop1" from S.sourceEntitlement as "root" left outer join S.SourceAnnouncement as "sourceannouncement_0" on ("root".id = "sourceannouncement_0".id)\n' +
            '  connection = RelationalDatabaseConnection(type = "H2")\n' +
            ')\n' ;
  assertEquals($expected, $result);
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::m2m2r::testProp2():Boolean[1]
{
   let result = meta::pure::executionPlan::executionPlan({|meta::relational::tests::m2m2r::Entitlement.all()
                                                          ->project([x|$x.name,x|$x.prop2],
                                                                    ['name','prop2']);},

                                              meta::relational::tests::m2m2r::AxionToModelMapping,
                                              meta::relational::tests::m2m2r::runtime(),
                                              meta::relational::extension::relationalExtensions(), noDebug())->planToString( meta::relational::extension::relationalExtensions());
  let expected =
                'Relational\n' +
                '(\n' +
                '  type = TDS[(name, String, VARCHAR(8192), ""), (prop2, String, VARCHAR(8192), "")]\n' +
                '  resultColumns = [("name", VARCHAR(200)), ("prop2", "")]\n' +
                '  sql = select "root".name as "name", case when "sourceannouncement_0".description like \'%RECEIVE CASH%\' then \'Cash\' else \'Stock\' end as "prop2" from S.sourceEntitlement as "root" left outer join S.SourceAnnouncement as "sourceannouncement_0" on ("root".id = "sourceannouncement_0".id)\n' +
                '  connection = RelationalDatabaseConnection(type = "H2")\n' +
                ')\n' ;

    assertEquals($expected, $result);
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::m2m2r::testProp3():Boolean[1]
{
  let result = meta::pure::executionPlan::executionPlan({|meta::relational::tests::m2m2r::Entitlement.all()
                                                          ->project([x|$x.name,x|$x.prop3],
                                                                    ['name','prop3']);},
    meta::relational::tests::m2m2r::AxionToModelMapping,
    meta::relational::tests::m2m2r::runtime(),
    meta::relational::extension::relationalExtensions(), noDebug())->planToString( meta::relational::extension::relationalExtensions());
    let expectedLegacyH2 =
                'Relational\n' +
                '(\n' +
                '  type = TDS[(name, String, VARCHAR(8192), ""), (prop3, Number, FLOAT, "")]\n' +
                '  resultColumns = [("name", VARCHAR(200)), ("prop3", "")]\n' +
                '  sql = select "root".name as "name", case when "sourceannouncement_0".basis = 0.0 then 0.0 else (((1.0 * "root".entitledQuantity) / "sourceannouncement_0".basis) * "sourceannouncement_0".grossRate) end as "prop3" from S.sourceEntitlement as "root" left outer join S.SourceAnnouncement as "sourceannouncement_0" on ("root".id = "sourceannouncement_0".id)\n' +
                '  connection = RelationalDatabaseConnection(type = "H2")\n' +
                ')\n' ;
    let expectedNewH2 =
                'Relational\n' +
                '(\n' +
                '  type = TDS[(name, String, VARCHAR(8192), ""), (prop3, Number, FLOAT, "")]\n' +
                '  resultColumns = [("name", VARCHAR(200)), ("prop3", "")]\n' +
                '  sql = select "root".name as "name", case when "sourceannouncement_0".basis = CAST(0.0 AS FLOAT) then CAST(0.0 AS FLOAT) else (((1.0 * "root".entitledQuantity) / "sourceannouncement_0".basis) * "sourceannouncement_0".grossRate) end as "prop3" from S.sourceEntitlement as "root" left outer join S.SourceAnnouncement as "sourceannouncement_0" on ("root".id = "sourceannouncement_0".id)\n' +
                '  connection = RelationalDatabaseConnection(type = "H2")\n' +
                ')\n' ;
    assertEqualsH2Compatible($expectedLegacyH2, $expectedNewH2, $result);
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::m2m2r::testProp4():Boolean[1]
{
   let result = meta::pure::executionPlan::executionPlan({accountNum: String[1]|
                                              meta::relational::tests::m2m2r::Entitlement.all()
                                              ->filter(x|$x.prop4($accountNum))
                                              ->project([x|$x.name,x|$x.prop4($accountNum)],
                                                            ['name','prop4']);},
                                              meta::relational::tests::m2m2r::AxionToModelMapping,
                                              meta::relational::tests::m2m2r::runtime(),
                                              meta::relational::extension::relationalExtensions(), noDebug())->planToString( meta::relational::extension::relationalExtensions());
  let expected = 'Sequence\n' +
                '(\n' +
                '  type = TDS[(name, String, VARCHAR(8192), ""), (prop4, Boolean, BIT, "")]\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [accountNum:String[1]]\n' +
                '    )\n' +
                '    Relational\n' +
                '    (\n' +
                '      type = TDS[(name, String, VARCHAR(8192), ""), (prop4, Boolean, BIT, "")]\n' +
                '      resultColumns = [("name", VARCHAR(200)), ("prop4", "")]\n' +
                '      sql = select "root".name as "name", "sourceannouncement_0".name = \'${accountNum?replace("\'", "\'\'")}\' as "prop4" from S.sourceEntitlement as "root" left outer join S.SourceAnnouncement as "sourceannouncement_0" on ("root".id = "sourceannouncement_0".id) where "sourceannouncement_0".name = \'${accountNum?replace("\'", "\'\'")}\'\n' +
                '      connection = RelationalDatabaseConnection(type = "H2")\n' +
                '    )\n' +
                '  )\n' +
                ')\n';  assertEquals($expected, $result);
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::m2m2r::testPreeavalOnSort():Boolean[1]
{
  let result = meta::pure::executionPlan::executionPlan(
            {|meta::relational::tests::m2m2r::Entitlement.all()
              ->project([x|$x.name,x|$x.prop1], ['name','prop1'])
              ->sort(asc('name'))}
            ->meta::pure::router::preeval::preval(meta::relational::extension::relationalExtensions()),
        meta::relational::tests::m2m2r::AxionToModelMapping,
        meta::relational::tests::m2m2r::runtime(),
        meta::relational::extension::relationalExtensions(),
        noDebug()
      )->planToString( meta::relational::extension::relationalExtensions());

  let expected =  'Relational\n'+
                  '(\n'+
                  '  type = TDS[(name, String, VARCHAR(8192), ""), (prop1, Boolean, BIT, "")]\n'+
                  '  resultColumns = [("name", VARCHAR(200)), ("prop1", "")]\n'+
                  '  sql = select "root".name as "name", "sourceannouncement_0".name = \'ha\' as "prop1" from S.sourceEntitlement as "root" left outer join S.SourceAnnouncement as "sourceannouncement_0" on ("root".id = "sourceannouncement_0".id) order by "name"\n'+
                  '  connection = RelationalDatabaseConnection(type = "H2")\n'+
                  ')\n';
  assertEquals($expected, $result);
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::m2m2r::testChainPostFilter(): Boolean[1]
{
  let connection = meta::external::store::relational::tests::testRuntime().connectionStores->filter(c|$c.element==meta::relational::tests::db)->toOne();
  let testConnection = $connection.connection->cast(@meta::external::store::relational::runtime::TestDatabaseConnection);

  meta::relational::metamodel::execute::executeInDb('Drop table if exists SimplePerson;', $connection);
  meta::relational::metamodel::execute::executeInDb('Create Table SimplePerson(id INT, firstName VARCHAR(200), lastName VARCHAR(200), age INT, addressId INT, firmId INT, managerId INT);', $connection);
  meta::relational::metamodel::execute::executeInDb('insert into SimplePerson (id, firstName, lastName, age, addressId, firmId, managerId) values (1, \'Peter\', \'Smith\',23, 1,1,2);', $connection);
  meta::relational::metamodel::execute::executeInDb('insert into SimplePerson (id, firstName, lastName, age, addressId, firmId, managerId) values (2, \'John\', \'Johnson\',22, 2,1,4);', $connection);
  meta::relational::metamodel::execute::executeInDb('insert into SimplePerson (id, firstName, lastName, age, addressId, firmId, managerId) values (3, \'John\', \'Hill\',12, 3,1,2);', $connection);
  meta::relational::metamodel::execute::executeInDb('insert into SimplePerson (id, firstName, lastName, age, addressId, firmId, managerId) values (4, \'Anthony\', \'Allen\',22, 4,1,null);', $connection);
  meta::relational::metamodel::execute::executeInDb('insert into SimplePerson (id, firstName, lastName, age, addressId, firmId, managerId) values (5, \'Fabrice\', \'Roberts\',34, 5,2,null);', $connection);
  meta::relational::metamodel::execute::executeInDb('insert into SimplePerson (id, firstName, lastName, age, addressId, firmId, managerId) values (6, \'Oliver\', \'Hill\',32, 6,3,null);', $connection);
  meta::relational::metamodel::execute::executeInDb('insert into SimplePerson (id, firstName, lastName, age, addressId, firmId, managerId) values (7, \'David\', \'Harris\',35, 7,4,null);', $connection);

  let query = {|meta::relational::tests::m2m2r::SimplePerson.all()->groupBy([ p|$p.age], [agg(p|$p.age, p | $p->count())], ['age', 'count'])->filter(x | $x.getInteger('age') < 30)};

  let result = execute($query,
                        meta::relational::tests::m2m2r::SimplePersonMapping,
                         ^Runtime(
      connectionStores=[
        ^meta::core::runtime::ConnectionStore(
          element =meta::relational::tests::m2m2r::Person_Info_store,
          connection = meta::external::store::relational::tests::testRuntime().connectionStores->filter(c|$c.element==meta::relational::tests::db)->toOne().connection->cast(@meta::external::store::relational::runtime::TestDatabaseConnection)),
        ^meta::core::runtime::ConnectionStore(element = ^ModelStore(),connection=^ meta::external::store::model::ModelChainConnection( mappings = [meta::relational::tests::m2m2r::SimplePersonMappingV2]))
      ]
  ),
                        meta::relational::extension::relationalExtensions()
                        );
  print($result.values.rows->map(r | $r.values->makeString(' | ')));
  assertEquals($result.values.rows->at(0).values->makeString(' | '), '12 | 1');
  assertEquals($result.values.rows->at(1).values->makeString(' | '), '22 | 2');
  assertEquals($result.values.rows->at(2).values->makeString(' | '), '23 | 1');

}

function meta::relational::tests::m2m2r::runtimeSimple():meta::core::runtime::Runtime[1]
{
  meta::core::runtime::getRuntimeWithModelConnection(meta::relational::tests::m2m2r::Entitlement,[])
}

function meta::relational::tests::m2m2r::runtime():Runtime[1]
{
 ^meta::core::runtime::Runtime(
      connectionStores=[
        ^meta::core::runtime::ConnectionStore(
          element = meta::relational::tests::m2m2r::SourceDB,
          connection = ^meta::external::store::relational::runtime::RelationalDatabaseConnection(
            type = DatabaseType.H2,
            authenticationStrategy = ^TestDatabaseAuthenticationStrategy(),
            datasourceSpecification = ^LocalH2DatasourceSpecification()
        )),
        ^ConnectionStore(element = ^ModelStore(),connection=^ModelChainConnection( mappings = [meta::relational::tests::m2m2r::AxionToModelMapping]))
      ]
  )
}

Class  meta::relational::tests::m2m2r::Entitlement
{
  name:String[1];
  entitledQuantity:Integer[0..1];

  prop4(s:String[1])
  {
    $this.announcement.name== $s
  }:Boolean[1];

  prop3()
  {
    if($this.announcement.basis==0.0,
      |0.0,
      | ($this.entitledQuantity->toOne()/$this.announcement.basis->toOne())* $this.announcement.grossRate->toOne());
  }:Number[1];

  prop2()
  {
    if($this.announcement.description->contains('RECEIVE CASH'),|'Cash',|'Stock');
  }:String[1];


  prop1()
  {
    $this.announcement.name=='ha'
  }:Boolean[1];

}

Class  meta::relational::tests::m2m2r::Announcement
{
  name:String[1];
  description:String[1];
  basis: Decimal[1];
  grossRate:Decimal[0..1];
}

Association meta::relational::tests::m2m2r::EntitlementAnnouncementAssociation
{
  entitlments: meta::relational::tests::m2m2r::Entitlement[*];
  announcement:  meta::relational::tests::m2m2r::Announcement[1];
}


//source Classes
Class  meta::relational::tests::m2m2r::SourceEntitlement
{
  name:String[1];
  entitledQuantity:Integer[0..1];
}

Class  meta::relational::tests::m2m2r::SourceAnnouncement
{
  name:String[1];
  description:String[1];
  basis: Decimal[1];
  grossRate:Decimal[0..1];
}

Class meta::relational::tests::m2m2r::SimplePerson {
  id: String[1];
  firstName: String[1];
  lastName: String[1];
  age : Integer[0..1];
}

Class meta::relational::tests::m2m2r::SimplePersonV2 {
  id: String[1];
  firstName: String[1];
  lastName: String[1];
  age : Integer[0..1];
}

Association meta::relational::tests::m2m2r::SourceEntitlementAnnouncementAssociation
{
  entitlments: meta::relational::tests::m2m2r::SourceEntitlement[1..*];
  announcement:  meta::relational::tests::m2m2r::SourceAnnouncement[1];
}

###Mapping
Mapping meta::relational::tests::m2m2r::AxionToModelMapping
(
  include meta::relational::tests::m2m2r::AxionRelational

  *meta::relational::tests::m2m2r::Entitlement: Pure
  {
    ~src meta::relational::tests::m2m2r::SourceEntitlement
    name: $src.name,
    entitledQuantity: $src.entitledQuantity,
    announcement: $src.announcement
  }

  *meta::relational::tests::m2m2r::Announcement: Pure
  {
    ~src meta::relational::tests::m2m2r::SourceAnnouncement
    name: $src.name,
    description:$src.description,
    basis: $src.basis,
    grossRate:$src.grossRate
  }
)

###Mapping
Mapping meta::relational::tests::m2m2r::AxionRelational
(

  *meta::relational::tests::m2m2r::SourceEntitlement: Relational
  {
    name:[meta::relational::tests::m2m2r::SourceDB] S.sourceEntitlement.name,
    entitledQuantity:[meta::relational::tests::m2m2r::SourceDB] S.sourceEntitlement.entitledQuantity,

    announcement: [meta::relational::tests::m2m2r::SourceDB] @entitlement_announcment
  }

  *meta::relational::tests::m2m2r::SourceAnnouncement: Relational
  {
    name:[meta::relational::tests::m2m2r::SourceDB] S.SourceAnnouncement.name,
    description:[meta::relational::tests::m2m2r::SourceDB] S.SourceAnnouncement.description,
    basis:[meta::relational::tests::m2m2r::SourceDB] S.SourceAnnouncement.basis,
    grossRate:[meta::relational::tests::m2m2r::SourceDB] S.SourceAnnouncement.grossRate
  }
)

###Mapping
Mapping meta::relational::tests::m2m2r::AxionTargetRelational
(

  *meta::relational::tests::m2m2r::Entitlement: Relational
  {
    name:[meta::relational::tests::m2m2r::SourceDB] S.sourceEntitlement.name,
    announcement: [meta::relational::tests::m2m2r::SourceDB] @entitlement_announcment
  }

  *meta::relational::tests::m2m2r::Announcement: Relational
  {
    name:[meta::relational::tests::m2m2r::SourceDB] S.SourceAnnouncement.name,
    description:[meta::relational::tests::m2m2r::SourceDB] S.SourceAnnouncement.description,
    basis:[meta::relational::tests::m2m2r::SourceDB] S.SourceAnnouncement.basis,
    grossRate:[meta::relational::tests::m2m2r::SourceDB] S.SourceAnnouncement.grossRate
  }
)

###Mapping
Mapping meta::relational::tests::m2m2r::SimplePersonMappingV2
(
  *meta::relational::tests::m2m2r::SimplePersonV2: Relational
  {
    // ~filter [store::GBM_Salesforce_Case]ServiceManagerCase
    ~primaryKey
    (
      [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.ID
    )
    ~mainTable [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson

    id: [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.ID,
    firstName: [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.FIRSTNAME,
    lastName: [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.LASTNAME,
    age: [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.AGE

  }
)

###Mapping
Mapping meta::relational::tests::m2m2r::SimplePersonMapping
(

  *meta::relational::tests::m2m2r::SimplePerson: Pure
  {
    ~src meta::relational::tests::m2m2r::SimplePersonV2
    id: $src.id,
    firstName: $src.firstName,
    lastName: $src.lastName,
    age: $src.age

  }

    *meta::relational::tests::m2m2r::SimplePersonV2: Relational
  {
    ~primaryKey
    (
      [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.ID
    )
    ~mainTable [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson

    id: [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.ID,
    firstName: [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.FIRSTNAME,
    lastName: [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.LASTNAME,
    age: [meta::relational::tests::m2m2r::Person_Info_store]SimplePerson.AGE

  }

)

###Relational
Database meta::relational::tests::m2m2r::SourceDB
(
  Schema S
  (
    Table sourceEntitlement
    (
      name VARCHAR(200),
      entitledQuantity DOUBLE,
      id INTEGER PRIMARY KEY
    )

    Table SourceAnnouncement
    (
      name VARCHAR(200),
      description VARCHAR(200),
      basis DOUBLE,
      grossRate DOUBLE,
      id INTEGER PRIMARY KEY
    )
  )

  Join entitlement_announcment(S.sourceEntitlement.id  = S.SourceAnnouncement.id)
)

###Relational
Database meta::relational::tests::m2m2r::Person_Info_store
(
  Table SimplePerson
    (
      ID VARCHAR(100) NOT NULL,
      FIRSTNAME VARCHAR(10000),
      LASTNAME VARCHAR(100000),
      AGE INT
    )
)
